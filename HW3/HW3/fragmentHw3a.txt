#version 440
in vec3 newPosition;
in vec3 newNormal;

layout(location=0) out vec4 fragColor;

struct SpotlightStruct {
    vec3 position;
    vec3 intensity;
    vec3 direction;
    float exponent;
    float cutoffCosine;
};

struct MaterialStruct {
   vec3 ambient;
   vec3 diffuse;
   vec3 specular;
   float shininess;
};

uniform SpotlightStruct light1;
uniform MaterialStruct material1;

vec3 computePhong(SpotlightStruct light, MaterialStruct material)
{
   vec3 toLight = normalize(light.position-newPosition);
   vec3 toView = normalize(-newPosition);
   vec3 reflection = reflect( -toLight, newNormal );
   vec3 ambient = light.intensity*material.ambient;
   float dotprod = max( dot(toLight,newNormal), 0.0 );
   vec3 diffuse = dotprod*light.intensity*material.diffuse;
   vec3 spec = vec3(0.0);
   if ( dotprod > 0.0 ) {
     spec = light.intensity*material.specular
               *pow(max(dot(reflection,toView), 0.0), material.shininess);
   }

   vec3 frag = min( ambient + diffuse + spec, vec3(1.0) );
   return frag;
}

void main()
{
   vec3 f1;
   f1 = vec3(0.0, 0.0, 0.0);
   f1 = computePhong(light1, material1);
   if (gl_FrontFacing) {
      fragColor = min(vec4(f1, 1.0), vec4(1.0));
   } else {
      fragColor = vec4( 0.2f, 0.9f, 0.1f, 0.0f );
   }
};
